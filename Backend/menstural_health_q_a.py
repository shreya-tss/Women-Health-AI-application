# -*- coding: utf-8 -*-
"""Menstural_Health Q/A

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/#fileId=https%3A//storage.googleapis.com/kaggle-colab-exported-notebooks/menstural-health-q-a-bd02e3bf-c4c1-4c98-af7a-7e9ad5cb615c.ipynb%3FX-Goog-Algorithm%3DGOOG4-RSA-SHA256%26X-Goog-Credential%3Dgcp-kaggle-com%2540kaggle-161607.iam.gserviceaccount.com/20250319/auto/storage/goog4_request%26X-Goog-Date%3D20250319T062843Z%26X-Goog-Expires%3D259200%26X-Goog-SignedHeaders%3Dhost%26X-Goog-Signature%3D7a3bcefbe707114b55ef76abcf36bee25feef9847b4f9ec86cf9386528f7a973855fb5e4969d46aae340391c342eb1f73ec51c2cddcbe9ae8a5e94cda2d18b996ec00b8f000b58f2b3346af9d5616ae315d9c7dbdb76267da0b7b8c90a2831eba09e69e01797caa981e8aea01497f02695cc4e5a8d34dde8cc8d5bd3b43d7544c959b0f6a475ff783bb580f764e442f9c781ce8484bfba8f2d50f44f2fbbdc5ff94ca774efbbd9969a8da634f6f0f6de1bbcd1906e4a3a7072362a711c0c7a5790fcdde534aa06eb73efd31ca813054ba656d527ef2565553dbd828ed387c16cf03aa5caaa1a93115c0dc79d87948154b86f090c0235bc88557d516509ec7fe9
"""

# This Python 3 environment comes with many helpful analytics libraries installed
# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python
# For example, here's several helpful packages to load

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

# Input data files are available in the read-only "../input/" directory
# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory



# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using "Save & Run All"
# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session




from langchain_community.document_loaders import UnstructuredURLLoader

urls = [
    'https://en.wikipedia.org/wiki/Menstruation', 'https://kidshealth.org/en/teens/menstruation.html',
    'https://www.nhs.uk/conditions/periods/', 'https://my.clevelandclinic.org/health/articles/10132-menstrual-cycle',
    'https://www.thewomens.org.au/health-information/periods/periods-overview/about-periods',
    'https://www.mayoclinic.org/healthy-lifestyle/womens-health/in-depth/menstrual-cycle/art-20047186',
    'https://www.mayoclinic.org/diseases-conditions/menopause/symptoms-causes/syc-20353397',
    'https://en.wikipedia.org/wiki/Menopause', 'https://www.nia.nih.gov/health/menopause/what-menopause',
    'https://en.wikipedia.org/wiki/Ovulation',
    'https://www.westsuburbanmc.com/the-role-of-hormones-in-the-menstrual-cycle','https://www.wikihow.com/Enjoy-Periods','https://www.healthline.com/health/womens-health/what-to-eat-during-period','https://www.webmd.com/women/ss/slideshow-women-superfoods', 'https://my.clevelandclinic.org/health/articles/23439-ovulation'
]
loader = UnstructuredURLLoader(urls=urls)
data = loader.load()

print(data)

from langchain_community.document_loaders import UnstructuredURLLoader
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain_community.embeddings import HuggingFaceEmbeddings
from langchain_chroma import Chroma
from sentence_transformers import CrossEncoder

"""## Text splitting"""

text_splitter = RecursiveCharacterTextSplitter(chunk_size=1000, chunk_overlap=100)
docs = text_splitter.split_documents(data)
print("Total number of documents:", len(docs))

"""## Embedding"""

embedding_model = HuggingFaceEmbeddings()
vectorstore = Chroma.from_documents(documents=docs, embedding=embedding_model)
retriever = vectorstore.as_retriever(search_type="similarity", search_kwargs={"k":10})

"""## Cross-Encoder Re-Ranking"""

reranker = CrossEncoder('cross-encoder/ms-marco-MiniLM-L-6-v2')

def cross_encoder_rerank(query, retrieved_docs, top_n=3):
    # Prepare query-document pairs
    pairs = [(query, doc.page_content) for doc in retrieved_docs]

    # Score pairs using the cross-encoder
    scores = reranker.predict(pairs)

    # Sort by score (higher is better)
    reranked_docs = sorted(zip(retrieved_docs, scores), key=lambda x: x[1], reverse=True)

    # Return the top-n documents
    return [doc for doc, _ in reranked_docs[:top_n]]

# Retrieve and re-rank
query = "What is menstruation?"
retrieved_docs = retriever.invoke(query)
reranked_docs = cross_encoder_rerank(query, retrieved_docs)

# Display results
for i, doc in enumerate(reranked_docs):
    print(f"\n### Document {i+1} ###\n")
    print(doc.page_content[:500], "...")

"""## RAG Pipeline"""

from langchain.chains import LLMChain
from langchain.prompts import PromptTemplate
from langchain_huggingface import HuggingFacePipeline
from langchain_core.output_parsers import StrOutputParser
from transformers import pipeline
import torch
model_id = "microsoft/phi-2"

text_generation_pipeline = pipeline(
    "text-generation",
    model=model_id,
    model_kwargs={"torch_dtype": torch.bfloat16},
    max_new_tokens=200,
    device=0,
    return_full_text=False,
    do_sample=False,
    eos_token_id=50256
)

llm = HuggingFacePipeline(pipeline=text_generation_pipeline)

# Structured prompt to enforce concise Q&A format
prompt_template = """
You are an expert on menstruation. Based on the following context, answer the question accurately and concisely. Do NOT include extra information. Do NOT generate unrelated texts.


Context:
{context}

Question:
{question}

Answer:
"""

prompt = PromptTemplate(
    input_variables=["context", "question"],
    template=prompt_template,
)

# Create LLM chain
llm_chain = prompt | llm | StrOutputParser()

# RAG Pipeline Function
def retrieve_and_answer(question):
    # Retrieve top documents from Chroma
    retrieved_docs = retriever.invoke(question)
    reranked_docs = cross_encoder_rerank(question, retrieved_docs)
    context = "\n".join([doc.page_content for doc in reranked_docs])

    # Invoke LLM
    response = llm_chain.invoke({"context": context, "question": question})

    return response



'''
context_1 = """
Menstruation is the shedding of the uterine lining when pregnancy does not occur. It is regulated by estrogen and progesterone.
"""
question_1 = "What causes menstruation to occur?"

context_2 = """
Menstrual pain (dysmenorrhea) is caused by prostaglandins triggering uterine contractions. Conditions like endometriosis can worsen it.
"""
question_2 = "Why do some people experience pain during menstruation?"

# Run the chain with Menstruation-related input
response_1 = llm_chain.invoke({"context": context_1, "question": question_1})
response_2 = llm_chain.invoke({"context": context_2, "question": question_2})

# Print Outputs
print("Answer 1:", response_1)
print("Answer 2:", response_2)



import numpy as np
import nltk
from nltk.translate.bleu_score import sentence_bleu

def evaluate_ranking_metrics(query, retrieved_docs, relevant_docs, top_k=3):
    reranked_docs = cross_encoder_rerank(query, retrieved_docs, top_n=top_k)

    # Extract content for evaluation
    reranked_texts = [doc.page_content for doc in reranked_docs]

    # Mean Reciprocal Rank (MRR)
    mrr = 0
    for idx, doc in enumerate(reranked_texts):
        if doc in relevant_docs:
            mrr = 1 / (idx + 1)
            break

    # Precision@k
    precision = sum(1 for doc in reranked_texts if doc in relevant_docs) / top_k

    # Recall@k
    recall = sum(1 for doc in reranked_texts if doc in relevant_docs) / len(relevant_docs)

    print(f"MRR: {mrr:.4f}, Precision@{top_k}: {precision:.4f}, Recall@{top_k}: {recall:.4f}")
    return mrr, precision, recall

# BLEU Score Calculation
def evaluate_bleu(generated_answer, reference_answer):
    reference_tokens = [nltk.word_tokenize(reference_answer)]
    generated_tokens = nltk.word_tokenize(generated_answer)

    bleu_score = sentence_bleu(reference_tokens, generated_tokens)

    print(f"BLEU Score: {bleu_score:.4f}")
    return bleu_score

# Example Conversation
answer = retrieve_and_answer("Why do some people experience pain during menstruation?")
evaluate_bleu(answer, "Menstrual cramps are caused by uterine contractions triggered by prostaglandins.")

answer = retrieve_and_answer("How can they reduce the pain?")
evaluate_bleu(answer, "Pain relief can be achieved through medications, heat therapy, and lifestyle changes.")
'''
